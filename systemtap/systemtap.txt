systemtap
---------
how to use systemtap

== requirement ==
1. userspace process
Install process debuginfo

2. kernel
Install kernel-debuginfo kernel-devel

3. systemtap
1) Install systemtap < centos7
2) Install devtoolset < centos8 or kernel > 4.18
   1. if host have been installed systemtap, need to remove them first.
   $ yum remove systemtap systemtap-runtime systemtap-client systemtap-devel
   2. add devtoolset repo
   [sclo]
   name=sclo
   baseurl='http://mirror.centos.org/7/sclo/rh/'
   enabled=1
   gpgcheck=0
   3. install devtoolset-8
   $ yum install devtoolset-8
   4. swtich to devtoolset envirement
   $ scl enable devtoolset-8 'bash'

== how to use ==
probe a process
$ stap -ve -x `pidof process` file.stp > trace.log

== basic syntax ==
1. userspace usaging
systemtap can use inline function to show something
  1. $$parms  <= the argments of a probe function
  2. $$locals <= the local values
  3. $returns <= the return values for function.return
  4. @cast(bio, "bio")->bi_ops <= use the cast to convert a void point to a type
we can use a suffix "$" to print structure, use suffix "$$" to print nested structure.

1). search a process function
$ stap -l 'process("/usr/libexec/qemu-kvm").function("*")'
2). search an argment of function
$ stap -L 'process("/usr/libexec/qemu-kvm").function("worker_thread")'
3). probe a process function
$ stap -ve 'probe process("/usr/libexec/qemu-kvm").function("worker_thread") {print("\n"),exit()}'
4). probe a process function return
$ stap -ve 'probe process("/usr/libexec/qemu-kvm").function("worker_thread").return {print("\n"),exit()}'
5). print a userspace call trace in a stp file
$ print_usyms(ubackstrace())
6). print the value of an address
$ user_string(address)/user_long/user_char/user_int
7). probe a process statement
$ stap -ve 'probe process("/usr/bin/ceph-osd").statement("_txc_state_proc@BlueStore.cc:8146") {printXX}'


2. kernel usaging
1). search a kernel function
$ stap -l 'kernel.function("*")'
2). search an argment of function
$ stap -L 'kernel.function("vfs_open")' 
3). search an trace  
$ stap -l 'kernel.trace("*")'
4). probe the function and trace
$ stap -e 'probe kernel.function/trace("vfs_open") {print XX}'
5) search if have a statement of file
$ stap -l 'probe kernel.statement("*@arch/x86/kernel/kvm.c:*")'
6). probe a statement
$ stap -e 'probe module("kvm").statement("*@virt/kvm/kvm_main.c:2085") {print XX}'
7). print stacktrace
$ print_backtrace()

NOTE:
1. for kernel modules, need to use module keyword.
2. for intree function, need to use kernel function.

== advance syntax ==
1. tapset
1) for qemu we can simply use qemu simpletrace like:
stap -ve "qemu.kvm.simpletrace.paio_submit_co,qemu.kvm.simpletrace.virtio_blk_handle_write{}"

== reference ==
[0] https://sourceware.org/systemtap/documentation.html
[1] https://sourceware.org/systemtap/langref/
[2] https://sourceware.org/systemtap/tutorial/ 
