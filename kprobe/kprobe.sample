common tools:
1. calculate the offset of struct field X.
  gdb vmlinux
  (gdb) p &((struct file *)0)->f_path.dentry
  $1 = (struct dentry **) 0x18 <irq_stack_union+24>
  (gdb) p &((struct dentry *)0)->d_name.name
  $2 = (const unsigned char **) 0x28 <irq_stack_union+40>
  (gdb) p &((struct file *)0)->f_flags
  $3 = (unsigned int *) 0x40 <irq_stack_union+64>

2. if function have been optimilize, we can use the addr to call, such as:
  gdb vmlinux
  (gdb) b dio_set_defer_completion
  (gdb) info b
  0xffffffff81282e1b in do_direct_IO at fs/direct-io.c:723
  0xffffffff81285c9e in __blockdev_direct_IO fs/direct-io.c:1278
  (gdb) disassmble /m 0xffffffff81285c9e
  // we can speculate the %r12 is the register that save the dio pointer
  0xffffffff81285c9e <+6302>:  cmpb   $0x0,0x44(%r12)

  echo "p 0xffffffff81285c9e dio=%r12" >> /sys/kernel/debug/tracing/kprobe_events

  NOTE: if the address is not equal to the address in /proc/kallsyms, it means
  there was an offset when kernel loaded, need add the offset.
  for vmlinux: get the "_text" based address in /proc/kallsyms, and use the relative
  address of debugging "func" got from gdb. then can calculate the absolute address
  in running kernel.

  for modules: get the mod's base offset in /proc/modules, get the func offset using
  "objdump -dS --adjust-vma=0xffffffffc0ac7000 scsi_transport_iscsi.ko" (uncompressd).
  or addr2line -e scsi_transport_iscsi.ko 0x58f0 get the function name for the func.

Sample 1:
tracing function ext4_file_open flags:
echo "p ext4_file_open flag=+0x40(%si):u32 name=+0(+0x28(+0x18(%si))):string"
    >> /sys/kernel/debug/tracing/kprobe_events

echo 'name ~ "*test"' > /sys/kernel/debug/tracing/events/kprobes/p_ext4_file_open_0/filter

***
flag = u32, name = const unsigned char *
add a '+0():string' is to get the value of the address of name.

fio-4151  [002] .... 85647.025601: p_ext4_file_open_0: (ext4_file_open+0x0/0x1f0) flag=49218 name="test1"
***

Sample 2:
bcache btree trace:
echo 0 > /sys/kernel/debug/tracing/events/kprobes/enable

echo > /sys/kernel/debug/tracing/trace
echo > /sys/kernel/debug/tracing/kprobe_events

# echo stacktrace > /sys/kernel/debug/tracing/trace_options 

# trace syscalls
echo 0 > /sys/kernel/debug/tracing/events/syscalls/enable
# echo 1 > /sys/kernel/debug/tracing/events/syscalls/sys_enter_io_submit/enable
# echo 1 > /sys/kernel/debug/tracing/events/syscalls/sys_exit_io_submit/enable

echo "p bch_btree_insert btree_pages=+0x11a4(%di):u16 btree=+0xcea0(%di) btree_page_order=+0xc8(+0xcea0(%di)):u8 level=+0xba(+0xcea0(%di)):u8 bkey=+0(%si) len_top=+8(%si) len_keys=+0(%si)" >> /sys/kernel/debug/tracing/kprobe_events
echo "p bch_btree_map_nodes_recurse btree=%di btree_nsets=+0xc9(%di):u8 btree_set0_size=+0xd8(%di):u16 btree_set1_size=+0x108(%di):u16 btree_set2_size=+0x138(%di):u16 btree_set3_size=+0x168(%di):u16 from=%dx" >> /sys/kernel/debug/tracing/kprobe_events
echo "p btree_insert_fn btree=%si" >> /sys/kernel/debug/tracing/kprobe_events
echo "p bch_btree_insert_node btree=%di level=+0xba(%di):u8 written_block=+0xb8(%di):u16 bkey=%dx" >> /sys/kernel/debug/tracing/kprobe_events
echo "r insert_u64s_remaining size=%ax:u32" >> /sys/kernel/debug/tracing/kprobe_events
echo "p btree_split btree=%di" >> /sys/kernel/debug/tracing/kprobe_events
echo "p bch_btree_node_alloc level=%dx:u8 parent_tree=%cx" >> /sys/kernel/debug/tracing/kprobe_events
echo "p bch_btree_insert_keys btree=%di bkey=+0(%dx)" >> /sys/kernel/debug/tracing/kprobe_events
echo "p bch_bset_insert insert_bkey=%dx" >> /sys/kernel/debug/tracing/kprobe_events
echo "p bch_btree_leaf_dirty btree=%di" >> /sys/kernel/debug/tracing/kprobe_events
echo "p bch_btree_node_write btree=%di" >> /sys/kernel/debug/tracing/kprobe_events
echo "p bch_btree_init_next btree=%di" >> /sys/kernel/debug/tracing/kprobe_events
echo "p bch_btree_node_read_done btree=%di" >> /sys/kernel/debug/tracing/kprobe_events
echo "p bch_btree_node_get bkey=%dx" >> /sys/kernel/debug/tracing/kprobe_events
echo "r mca_find btree=%ax" >> /sys/kernel/debug/tracing/kprobe_events
echo "p mca_alloc bkey=%dx level=%cx:u8" >> /sys/kernel/debug/tracing/kprobe_events
echo "r mca_alloc btree=%ax" >> /sys/kernel/debug/tracing/kprobe_events

echo 1 > /sys/kernel/debug/tracing/events/kprobes/enable

Sample 3:
# trace bio
echo 0 > /sys/kernel/debug/tracing/events/kprobes/enable

echo > /sys/kernel/debug/tracing/trace
echo > /sys/kernel/debug/tracing/kprobe_events

# echo stacktrace > /sys/kernel/debug/tracing/trace_options

# enable trace sysall
echo 0 > /sys/kernel/debug/tracing/events/syscalls/enable
echo 1 > /sys/kernel/debug/tracing/events/syscalls/sys_enter_io_submit/enable
echo 1 > /sys/kernel/debug/tracing/events/syscalls/sys_exit_io_submit/enable

echo "p io_submit_one" >> /sys/kernel/debug/tracing/kprobe_events

echo "p aio_write nbytes=+0x20(%si):u32" >> /sys/kernel/debug/tracing/kprobe_events

echo "p submit_bio bio=%di bi_opf=+0x10(%di):u32 bi_size=+0x28(%di):u32" >> /sys/kernel/debug/tracing/kprobe_events

echo 1 > /sys/kernel/debug/tracing/events/kprobes/enable

